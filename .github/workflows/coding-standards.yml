name: PR Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  coding-standards-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get the commit SHA
        id: commit-sha
        run: echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Get list of changed files
        id: changed-files
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: ${{ github.base_ref }},
              head: ${{ github.head_ref }},
            });
            const changedFiles = comparison.files.map(file => file.filename);
            console.log(`Changed files: ${JSON.stringify(changedFiles)}`);
            core.setOutput('changedFiles', JSON.stringify(changedFiles));
      - name: Send changed files to endpoint
        run: |
          changed_files=$(echo '${{ steps.changed-files.outputs.changedFiles }}' | jq -r '.[]')
          curl_cmd="curl --location 'https://dev-appmod.techo.camp/pr_push_check/css_validation_api' --header 'Content-Type: multipart/form-data' --form threshold=0.4"
          for file in $changed_files; do
            curl_cmd="$curl_cmd --form files=@$file"
          done
          echo "Executing: $curl_cmd"
          response=$(eval $curl_cmd)
          status=$(echo "$response" | jq -r '.status')
          if [[ "$status" == "fail" ]]; then
            echo "Error: Received status $status"
            exit 1
          fi
      - name: Get content of changed files
        id: file-contents
        run: |
          CHANGED_FILES=$(echo '${{ steps.changed-files.outputs.changedFiles }}' | jq -r '.[]')
          echo "Parsed changed files: $CHANGED_FILES"
          CONTENTS=""
          for FILE in $CHANGED_FILES; do
            if [ -f "$FILE" ]; then
              CONTENT=$(cat "$FILE" | jq -Rs .)
              echo "File: $FILE"
              echo "$CONTENT"
              CONTENTS="$CONTENTS{\"filename\":\"$FILE\",\"content\":$CONTENT},"
            else
              echo "File $FILE not found!"
            fi
          done
          CONTENTS="[${CONTENTS%,}]"
          echo "FILE_CONTENTS=$CONTENTS" >> $GITHUB_ENV
