name: PR Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  coding-standards-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get the commit SHA
        id: commit-sha
        run: echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Get list of changed files
        id: changed-files
        uses: actions/github-script@v6
        with:
          script: |
            const baseSha = context.payload.before;
            const headSha = context.payload.after;
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: baseSha,
              head: headSha,
            });
            const changedFiles = comparison.files.map(file => file.filename);
            console.log(`Changed files: ${JSON.stringify(changedFiles)}`);
            core.setOutput('changedFiles', JSON.stringify(changedFiles));
      - name: Send changed files to endpoint
        id: send-changed-files
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            const changedFiles = JSON.parse(
              '${{ steps.changed-files.outputs.changedFiles }}',
            );

            const formData = new FormData();
            formData.append('threshold', 0.1);


            changedFiles.forEach((file) => {
              if (fs.existsSync(file)) {
              formData.append('files', fs.createReadStream(file));
              }
            });

            const response = await fetch(
              'https://dev-appmod.techo.camp/pr_push_check/css_validation_api',
              {
                method: 'POST',
                body: formData,
              },
            );

            if (!response.ok) {
              throw new Error('Failed to send changed files to endpoint');
            }

            const data = await response.json();
            console.log('Response:', data);

            if (data.status === 'pass') {
              console.log('Status is pass. Skipping below commands.');
              process.exit(0);
            }

            const { details } = data;

            if (!details || !details.length) {
              console.log('No details found. Exiting with error.');
              process.exit(1);
            }

            for (const detail of details) {
              const { ai_response, file_information } = detail;

              for (const item of ai_response) {
                const { helperText, suggestions_set } = item;

                let body = helperText.join('\n');

                for (const suggestion of suggestions_set) {
                  const { suggestion_description, line_start, line_end, updated_code } =
                    suggestion;

                  body += `\n${suggestion_description}`;

                  if (updated_code.length) {
                    const code_string = updated_code.join('\n');
                    body += '\n```suggestion\n' + code_string + '```suggestion';
                  }

                  console.log('Body:', body);

                  // Use the GitHub API to create a PR comment for each suggestion
                  const commitRes = await fetch(
                    `https://api.github.com/repos/${{github.repository}}/pulls/${{ github.event.pull_request.number}}/comments`,
                    {
                      method: 'POST',
                      headers: {
                        Authorization: `Bearer ${{ secrets.GITHUB_TOKEN }}`,
                        Accept: 'application/vnd.github.v3+json',
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({
                        body,
                        commit_id: '${{ github.event.pull_request.head.sha }}',
                        path: file_information.file_name,
                        start_file: line_start,
                        line: line_end,
                        start_side: 'RIGHT',
                        side: 'RIGHT',
                      }),
                    },
                  );

                  if (!commitRes.ok) {
                    throw new Error('Failed to create PR comment');
                  }
                }
              }
            }
