name: PR Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  coding-standards-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get the commit SHA
        id: commit-sha
        run: echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Get list of changed files
        id: changed-files
        uses: actions/github-script@v6
        with:
          script: |
            const baseSha = context.payload.before;
            const headSha = context.payload.after;
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: baseSha,
              head: headSha,
            });
            const changedFiles = comparison.files.map(file => file.filename);
            console.log(`Changed files: ${JSON.stringify(changedFiles)}`);
            core.setOutput('changedFiles', JSON.stringify(changedFiles));
      - name: Send changed files to endpoint
        run: |
          changed_files=$(echo '${{ steps.changed-files.outputs.changedFiles }}' | jq -r '.[]')
          curl_cmd="curl --location 'https://dev-appmod.techo.camp/pr_push_check/css_validation_api' --header 'Content-Type: multipart/form-data' --form threshold=0.4"
          for file in $changed_files; do
            curl_cmd="$curl_cmd --form files=@$file"
          done

          echo "Executing: $curl_cmd"
          response=$(eval $curl_cmd)

          # Extract details from response array
          details=$(echo "$response" | jq -r '.details')

          # Loop through details and create PR comments
          for detail in $(echo "$details" | jq -r '.[]'); do
           
            ai_response=$(echo "$detail" | jq -r '.ai_response')
            suggestions=$(echo "$ai_response" | jq -r '.suggestions_set')
            filename=$(echo "$detail" | jq -r '.file_information.file_name')

            for suggestion in $(echo "$suggestions" | jq -r '.[]'); do
              suggestion_description=$(echo "$suggestion" | jq -r '.suggestion_description')
              line_start=$(echo "$suggestion" | jq -r '.line_start')
              line_end=$(echo "$suggestion" | jq -r '.line_end')

              body="$suggestion_description"
              updated_code=$(echo "$suggestion" | jq -r '.updated_code[]')
               
              echo "Updated code: $updated_code"

              if [[ ${#updated_code[@]} -eq 0 ]]; then
                body_with_code="$body"
              else
                body_with_code=$(printf "%s\n\n```suggestion\n%s```suggestion" "$body" "$updated_code")
              fi


              echo "Body: $body_with_code"

              # Use the GitHub API to create a PR comment for each suggestion
              curl -X POST \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -d "{\"body\": \"$body_with_code\", \"commit_id\": \"${{ github.event.pull_request.head.sha }}\", \"path\": \"$filename\", \"start_line\": $line_start, \"line\": $line_end, \"start_side\": "RIGHT", \"side\": "RIGHT" }" \
                "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments"
            done
